{"version":3,"file":"genese-angular.js","sources":["../../../genese/angular/src/lib/services/tools.service.ts","../../../genese/angular/src/lib/services/genese-environment.service.ts","../../../genese/angular/src/lib/enums/response-status.ts","../../../genese/angular/src/lib/enums/request-method.ts","../../../genese/angular/src/lib/factories/genese-deprecated.factory.ts","../../../genese/angular/src/lib/factories/genese-angular.factory.ts","../../../genese/angular/src/lib/services/genese.service.ts","../../../genese/angular/src/lib/genese-angular.service.ts","../../../genese/angular/src/lib/genese.component.ts","../../../genese/angular/src/lib/genese.module.ts","../../../genese/angular/src/lib/services/extract.service.ts","../../../genese/angular/src/lib/models/genese-config.model.ts","../../../genese/angular/src/lib/models/genese-model-environment.model.ts","../../../genese/angular/src/lib/models/primitive.model.ts","../../../genese/angular/src/lib/models/request-options.model.ts","../../../genese/angular/src/public-api.ts","../../../genese/angular/src/genese-angular.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n// @dynamic\n@Injectable()\nexport class Tools {\n\n\n    constructor() { }\n\n\n    /**\n     * clone object with deep copy\n     */\n    static clone(model: any): any {\n        if (model) {\n            if (Array.isArray(model)) {\n                const newArray = [];\n                model.forEach(item => newArray.push(this.clone(item)));\n                return newArray;\n            } else if (typeof model === 'object') {\n                const newObject = {};\n                Object.keys(model).forEach(key => newObject[key] = this.clone(model[key]));\n                return newObject;\n            } else {\n                return model;\n            }\n        } else {\n            return model;\n        }\n    }\n\n\n    /**\n     * Check if an object is a primitive or not\n     */\n    static isPrimitive(target: any): boolean {\n        return typeof target === 'string'\n            || typeof target === 'number'\n            || typeof target === 'boolean';\n    }\n\n\n    /**\n     * Returns a value by default if value to check doesn't exists\n     */\n    static default(valueToCheck, valueByDefault): any {\n        return valueToCheck ? valueToCheck : valueByDefault;\n    }\n\n\n    /**\n     * Check if two objects have the same values for every key\n     */\n    static isSameObject(obj1: any, obj2: any): boolean {\n        if (obj1 === obj2) {\n            return true;\n        }\n        if (typeof obj1 === 'number' && obj1.toString() === obj2.toString()) {\n            return true;\n        }\n        if (\n            (obj1 === undefined || obj2 === undefined)\n            || (Array.isArray(obj1) && !Array.isArray(obj2))\n            || (!Array.isArray(obj1) && Array.isArray(obj2))\n            || (Array.isArray(obj1) && Array.isArray(obj2) && obj1.length !== obj2.length)\n        ) {\n            return false;\n        }\n        if (Array.isArray(obj1) && Array.isArray(obj2)) {\n            let index = 0;\n            for (const element of obj1) {\n                if (!this.isSameObject(element, obj2[index])) {\n                    return false;\n                }\n                index++;\n            }\n            return true;\n        } else {\n            for (const key of Object.keys(obj1)) {\n                if ((!obj2[key] && !!obj1[key]) || (!!obj2[key] && !obj1[key])) {\n                    return false;\n                }\n                if (Array.isArray(obj1[key])) {\n                    if (!this.isSameObject(obj1[key], obj2[key])) {\n                        return false;\n                    }\n                } else {\n                    if (typeof obj1[key] === 'object') {\n                        if (!this.isSameObject(obj1[key], obj2[key])) {\n                            return false;\n                        }\n                    } else {\n                        if (obj1[key] && obj2[key] && obj1[key].toString() !== obj2[key].toString()) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n        }\n        return true;\n    }\n\n\n\n    // --------------------------------------------------\n    //                  REQUEST METHODS\n    // --------------------------------------------------\n\n\n\n\n    static isPath(str: string): boolean {\n        return /^\\/[-a-zA-Z0-9@:%.{}_+~#=]?/.test(str);\n    }\n\n\n    /**\n     * Get the root path of the api\n     */\n    static apiRoot(rootApi: string, path?: string, id?: string, ): string {\n        const url = path ? rootApi + path : rootApi;\n        return id ? `${url}/${id}` : url;\n    }\n\n\n\n    /**\n     * Check if the id is correct\n     */\n    static checkId(id: string): void {\n        if (!id || !(+id > 0)) {\n            throw Error('Incorrect Genese id.');\n        }\n    }\n\n\n    /**\n     * Check if the path is correct\n     */\n    static checkPath(path: string): void {\n        if (!path || typeof path !== 'string') {\n            throw Error('Incorrect Genese path.');\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { GeneseConfig } from '../models/genese-config.model';\nimport { Tools } from './tools.service';\n\n@Injectable()\nexport class GeneseEnvironmentService {\n\n    // --------------------------------------------------\n    //                     CONSTRUCTOR\n    // --------------------------------------------------\n\n    public api: string;\n    public extract: string;\n    public pageIndex: string;\n    public pageSize: string;\n    public results: string;\n    public totalResults: string;\n\n    constructor() { }\n\n    // --------------------------------------------------\n    //                     METHODS\n    // --------------------------------------------------\n\n    /**\n     * Configure Genese environment\n     */\n    setEnvironment(config: GeneseConfig) {\n        if (config) {\n            this.api = Tools.default(config.api, 'http://localhost:3000');\n            this.extract = Tools.default(config.extract, 'gnExtract');\n            if (config.pagination) {\n                this.pageIndex = Tools.default(config.pagination.pageIndex, 'gnPageIndex');\n                this.pageSize = Tools.default(config.pagination.pageSize, 'gnPageSize');\n                this.results = Tools.default(config.pagination.results, 'gnPageResults');\n                this.totalResults = Tools.default(config.pagination.totalResults, 'gnPageTotalResults');\n            }\n        }\n    }\n}\n","export enum ResponseStatus {\n  FAILED = 'FAILED',\n  SUCCESS = 'SUCCESS',\n}\n","export enum RequestMethod {\n    DELETE = 'delete',\n    GET = 'get',\n    PATCH = 'patch',\n    POST = 'post',\n    PUT = 'put'\n}\n","import { GetAllParams, GetAllResponse, GetAllWithPaginationParams } from '../models/get-all-params.model';\nimport { TConstructor } from '../models/t-constructor.model';\nimport { Tools } from '../services/tools.service';\nimport { GeneseEnvironmentService } from '../services/genese-environment.service';\nimport { ResponseStatus } from '../enums/response-status';\nimport { RequestMethod } from '../enums/request-method';\nimport { RequestOptions } from '../models/request-options.model';\nimport { GetOneParams } from '../models/get-one-params.model';\nimport { GeneseMapper } from 'genese-mapper';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class Genese<T> {\n\n\n    private geneseMapperService: GeneseMapper<T>;\n\n\n    constructor(private http: HttpClient,\n                private geneseEnvironment: GeneseEnvironmentService,\n                private tConstructor: TConstructor<T>) {\n        this.geneseMapperService = new GeneseMapper<T>(tConstructor);\n    }\n\n\n    // --------------------------------------------------\n    //                   CRUD METHODS\n    // --------------------------------------------------\n\n\n    /**\n     * Creates an object and return an Observable of the created object with T type\n     * @deprecated since 1.2.0. Please use post() method instead\n     */\n    create(newObject: T, options?: RequestOptions): Observable<T | any> {\n        this.checkTType(newObject);\n        return this.http.post(this.apiRoot(this.getStandardPath()), newObject, this.getRequestOptions(options))\n            .pipe(\n                map((result) => {\n                    if (options && options.mapData === false) {\n                        return result;\n                    } else {\n                        return this.geneseMapperService.map(result);\n                    }\n                })\n            );\n    }\n\n\n\n    /**\n     * Creates an object and return an Observable of the created object with T type\n     * @deprecated since 1.2.0. Please use post() method instead\n     */\n    createCustom(path: string, body?: object, options?: RequestOptions): Observable<T | any> {\n        this.checkPath(path);\n        body = Tools.default(body, {});\n        return this.http.post(this.apiRoot(path), body, this.getRequestOptions(options))\n            .pipe(\n                map((result) => {\n                    if (options && options.mapData === false) {\n                        return result;\n                    } else {\n                        return this.geneseMapperService.map(result);\n                    }\n                })\n            );\n    }\n\n\n\n    /**\n     * Deletes an element and returns success or failed status.\n     * This method needs to respect Genese standard model\n     */\n    delete(id: string): Observable<ResponseStatus> {\n        this.checkId(id);\n        return this.http.delete(`${this.apiRoot(this.getStandardPath())}/${id}`, {observe: 'response'})\n            .pipe(\n                map((response: HttpResponse<any>) => {\n                    return response && response.ok === true ? ResponseStatus.SUCCESS : ResponseStatus.FAILED;\n                })\n            );\n    }\n\n\n\n    /**\n     * Delete an element and returns success or failed status.\n     * This method can be used with custom params.\n     */\n    deleteCustom(path: string, options?: RequestOptions): Observable<ResponseStatus> {\n        this.checkPath(path);\n        const url = this.apiRoot(path);\n        options = Tools.default(options, {});\n        Object.assign(options, {observe: 'response'});\n        return this.http.delete(url, options as unknown)\n            .pipe(\n                map((response: HttpResponse<any>) => {\n                    return response && response.ok === true ? ResponseStatus.SUCCESS : ResponseStatus.FAILED;\n                })\n            );\n    }\n\n\n\n    /**\n     * Returns mapped object using fetch method\n     */\n    async fetch(path: string, method: RequestMethod, requestInit?: RequestInit): Promise<T> {\n        if (!method || !path) {\n            console.error('Incorrect parameters : impossible to send request');\n            return Promise.reject('Incorrect parameters : impossible to send request');\n        }\n        const url = this.apiRoot(path);\n        const response = await fetch(url, requestInit);\n        const data = await response.clone().json();\n        if (method === RequestMethod.DELETE) {\n            return this.geneseMapperService.map(data ? data.body : undefined);\n        } else {\n            return this.geneseMapperService.map(data);\n        }\n    }\n\n\n\n    /**\n     * Get all elements of array of data returned by GET request and map them with T type\n     */\n    getAll(params?: GetAllParams): Observable<T[]> {\n        let httpParams = new HttpParams();\n        if (params && params.filters) {\n            for (const key of Object.keys(params.filters)) {\n                if (params.filters[key]) {\n                    httpParams = httpParams.set(key, params.filters[key].toString());\n                }\n            }\n        }\n        const options = {params: httpParams};\n        const url = this.apiRoot(this.getStandardPath());\n        return this.http.get(url, options).pipe(\n            map((response: any) => {\n                return response ? this.geneseMapperService.arrayMap(response) : [];\n            })\n        );\n    }\n\n\n\n    /**\n     * Get all elements of array of data returned by GET request and map them with T type\n     * If you want specific HttpParams you should to declare them in the second parameter because\n     * they have priority over RequestOptions\n     */\n    getAllCustom(path: string, params?: GetAllParams, requestOptions?: RequestOptions): Observable<T[]> {\n        if (!path) {\n            console.error('No path : impossible to get elements');\n            return of(undefined);\n        }\n        let httpParams = new HttpParams();\n\n        if (requestOptions && requestOptions.params) {\n            for (const key of Object.keys(requestOptions.params)) {\n                if (requestOptions.params[key]) {\n                    httpParams = httpParams.set(key, requestOptions.params[key].toString());\n                }\n            }\n            delete requestOptions.params;\n        }\n        if (params && params.filters) {\n            for (const key of Object.keys(params.filters)) {\n                if (params.filters[key]) {\n                    httpParams = httpParams.set(key, params.filters[key].toString());\n                }\n            }\n        }\n        const allOptions = Object.assign({}, {params: httpParams}, requestOptions) as any;\n        const url = this.apiRoot(path);\n        return this.http.get(url, allOptions).pipe(\n            map((response: any) => {\n                return response ? this.geneseMapperService.arrayMap(response) : [];\n            })\n        );\n    }\n\n\n\n    /**\n     * Get all elements with pagination\n     * If the http response have paginated format, it returns paginated response with this format :\n     * {\n     *      totalResults?: number;\n     *      results: T[];\n     * }\n     */\n    getAllWithPagination(path: string, params: GetAllWithPaginationParams): Observable<GetAllResponse<T>> {\n        if (!path) {\n            console.error('No path : impossible to get paginated elements');\n            return of(undefined);\n        }\n        if (!params || !params.pageSize) {\n            console.error('Incorrect parameters : impossible to get paginated elements. The parameter pageSize must be defined.');\n            return of(undefined);\n        }\n        let httpParams = new HttpParams();\n        if (params) {\n            if (params.pageIndex !== undefined) {\n                httpParams = httpParams.set(this.geneseEnvironment.pageIndex, params.pageIndex.toString());\n            }\n            if (params.pageSize !== undefined) {\n                httpParams = httpParams.set(this.geneseEnvironment.pageSize, params.pageSize.toString());\n            }\n            if (params.filters) {\n                for (const key of Object.keys(params.filters)) {\n                    if (params.filters[key]) {\n                        httpParams = httpParams.set(key, params.filters[key].toString());\n                    }\n                }\n            }\n        }\n        const options = {params: httpParams};\n        const url = this.apiRoot(path);\n        return this.http.get(url, options).pipe(\n            map((response: any) => {\n                if (response && this.isPaginatedResponse(response)) {\n                    return {\n                        results: this.geneseMapperService.arrayMap(response[this.geneseEnvironment.results]),\n                        totalResults: response[this.geneseEnvironment.totalResults]\n                    };\n                } else {\n                    console.error('Response is not paginated. ' +\n                        'Please verify that the response includes an array corresponding to your Genese pagination environment.');\n                    return undefined;\n                }\n            })\n        );\n    }\n\n\n\n    /**\n     * This method must be called when the http response is not an object, but an array (for example : ['a', 'b'])\n     * The DTO model must implement the ArrayResponse interface\n     *\n     * Example :\n     * MyModel {\n     *     gnArrayResponse: [{\n     *         id: '',\n     *         name: ''\n     *     }]\n     * }\n     * The getArray method will return the response array with the correct format\n     */\n    getArray(): Observable<any> {\n        this.checkIfTTypeIsArrayResponseType();\n        const url = this.apiRoot(this.getStandardPath());\n        return this.http.get(url)\n            .pipe(\n                map((data: any) => {\n                    const tObject = {\n                        gnArrayResponse: data\n                    };\n                    return this.geneseMapperService.map(tObject) ? this.geneseMapperService.map(tObject)['gnArrayResponse'] : undefined;\n                })\n            );\n    }\n\n\n\n    /**\n     * Get one element of the T class (or the U class if the uConstructor param is defined)\n     */\n    getOne(id: string): Observable<T> {\n        this.checkId(id);\n        const url = this.apiRoot(this.getStandardPath(), id);\n        return this.http.get(url)\n            .pipe(\n                map((data: any) => {\n                    return this.geneseMapperService.map(data);\n                })\n            );\n    }\n\n\n\n    /**\n     * Get one element of the T class (or the U class if the uConstructor param is defined)\n     */\n    getOneCustom(path: string, params?: GetOneParams): Observable<T> {\n        this.checkPath(path);\n        let httpParams = new HttpParams();\n        if (params) {\n            if (params.filters) {\n                for (const key of Object.keys(params.filters)) {\n                    if (params.filters[key]) {\n                        httpParams = httpParams.set(key, params.filters[key].toString());\n                    }\n                }\n            }\n        }\n        const options = {params: httpParams};\n        const url = this.apiRoot(path);\n        return this.http.get(url, options)\n            .pipe(\n                map((data: any) => {\n                    return this.geneseMapperService.map(data);\n                })\n            );\n    }\n\n\n\n    /**\n     * Get one element of the T class (or the U class if the uConstructor param is defined)\n     */\n    request(path: string, method: RequestMethod, options?: RequestOptions): Observable<T | any> {\n        this.checkPath(path);\n        if (!method) {\n            throw Error('Incorrect Genese method : impossible to send request');\n        }\n        options = Tools.default(options, {});\n        if (!options.headers\n            && (method === RequestMethod.POST || method === RequestMethod.PUT || method === RequestMethod.PATCH)) {\n            options.headers = {'Content-Type': 'application/json'};\n        }\n        if (!options.observe && method === RequestMethod.DELETE) {\n            options.observe = 'response';\n        }\n        const url = this.apiRoot(path, options.id);\n        return this.http.request(method, url, options)\n            .pipe(\n                map((result: any) => {\n                    if (method === RequestMethod.DELETE) {\n                        if (options && options.mapData === false) {\n                            return result;\n                        } else {\n                            return this.geneseMapperService.map(result ? result.body : undefined);\n                        }\n                    } else {\n                        if (options && options.mapData === false) {\n                            return result;\n                        } else {\n                            return this.geneseMapperService.map(result);\n                        }\n                    }\n                })\n            );\n    }\n\n\n\n    /**\n     * Update an element with T type\n     * @deprecated since 1.2.0. Please use put() method instead\n     */\n    update(id: string, updatedObject: T, options?: RequestOptions): Observable<T | any> {\n        this.checkId(id);\n        this.checkTType(updatedObject);\n        options = Object.assign(this.getRequestOptions(options), {observe: 'body'});\n        return this.http.put(this.apiRoot(this.getStandardPath()), updatedObject, options as unknown)\n            .pipe(\n                map(result => {\n                    if (options && options.mapData === false) {\n                        return result;\n                    } else {\n                        return this.geneseMapperService.map(result);\n                    }\n                })\n            );\n    }\n\n\n\n    /**\n     * Update an element with T type\n     * @deprecated since 1.2.0. Please use put() method instead\n     */\n    updateCustom(path: string, body?: object, options?: RequestOptions): Observable<T | any> {\n        this.checkPath(path);\n        body = Tools.default(body, {});\n        options = Object.assign(this.getRequestOptions(options), {observe: 'body'});\n        return this.http.put(this.apiRoot(path), body, options as unknown)\n            .pipe(\n                map(result => {\n                    if (options && options.mapData === false) {\n                        return result;\n                    } else {\n                        return this.geneseMapperService.map(result);\n                    }\n                })\n            );\n    }\n\n\n    // --------------------------------------------------\n    //                   OTHER METHODS\n    // --------------------------------------------------\n\n\n    /**\n     * Get the root path of the api\n     */\n    apiRoot(path?: string, id?: string): string {\n        const url = path ? this.geneseEnvironment.api + path : this.geneseEnvironment.api;\n        return id ? `${url}/${id}` : url;\n    }\n\n\n\n    /**\n     * Check if the id is correct\n     */\n    checkId(id: string): void {\n        if (!id || !(+id > 0)) {\n            throw Error('Incorrect Genese id.');\n        }\n    }\n\n\n\n    /**\n     * Check if the type T implements the ArrayResponse interface.\n     */\n    checkIfTTypeIsArrayResponseType(): void {\n        const tObject = new this.tConstructor();\n        if (!tObject['gnArrayResponse']) {\n            throw Error('The model must contain the gnArrayResponse property.');\n        }\n    }\n\n\n\n    /**\n     * Check if the path is correct\n     */\n    checkPath(path: string): void {\n        if (!path || typeof path !== 'string') {\n            throw Error('Incorrect Genese path.');\n        }\n    }\n\n\n\n    /**\n     * Check if the path is correct\n     */\n    // TODO : check nested keys\n    checkTType(newObject: any): void {\n        if (!newObject) {\n            throw Error('Genese : there is no T object.');\n        }\n        if (newObject === {}) {\n            throw Error('Genese : empty object.');\n        }\n        if (Array.isArray(newObject)) {\n            throw Error('Genese : an array is not a T object.');\n        }\n        const tObject = new this.tConstructor();\n        Object.keys(newObject).forEach(key => {\n            if (!tObject.hasOwnProperty(key)) {\n                throw Error('Genese : the object is not a T object');\n            }\n        });\n    }\n\n\n\n    /**\n     * Get request options of the http request\n     */\n    private getRequestOptions(options: RequestOptions): any {\n        options = Tools.default(options, {});\n        options.headers = Tools.default(options.headers, {'Content-Type': 'application/json'});\n        return  Object.assign(options, {observe: 'body'});\n    }\n\n\n\n    /**\n     * Check if the response is paginated\n     */\n    private isPaginatedResponse(data: any): boolean {\n        return data && Array.isArray(data[this.geneseEnvironment.results]);\n    }\n\n\n\n    /**\n     * Get standard path when Genese model contains genese.path\n     */\n    private getStandardPath(): string {\n        const model = new this.geneseMapperService.tConstructor();\n        if (!model['genese'] || !model['genese'].path) {\n            throw Error('No Genese path environment for the model  : impossible to get element.');\n        } else {\n            return model['genese'].path;\n        }\n    }\n\n\n\n    /**\n     * Translate data for a given language\n     */\n    translate(data: any, language: string): any {\n        if (!language) {\n            console.error('No data or no language : impossible to get element');\n            return undefined;\n        } else {\n            return this.geneseMapperService.translate(data, language);\n        }\n    }\n}\n","import { TConstructor } from '../models/t-constructor.model';\nimport { Tools } from '../services/tools.service';\nimport { GeneseEnvironmentService } from '../services/genese-environment.service';\nimport { RequestOptions } from '../models/request-options.model';\nimport { ResponseStatus } from '../enums/response-status';\nimport { GeneseMapper } from 'genese-mapper';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\n\n\nexport class GeneseAngular<T, U> {\n\n\n    private geneseEnvironmentService: GeneseEnvironmentService;\n    private geneseMapperServiceT?: GeneseMapper<T>;\n    private geneseMapperServiceU?: GeneseMapper<U>;\n    private http: HttpClient;\n    private readonly tConstructor?: TConstructor<T>;\n    private readonly uConstructor?: TConstructor<U>;\n\n\n    constructor(http: HttpClient,\n                geneseEnvironmentService: GeneseEnvironmentService,\n                tConstructor?: TConstructor<T>,\n                uConstructor?: TConstructor<U>) {\n        this.http = http;\n        this.tConstructor = tConstructor;\n        this.uConstructor = uConstructor;\n        this.geneseMapperServiceT = tConstructor ? new GeneseMapper<T>(tConstructor) : undefined;\n        this.geneseMapperServiceU = uConstructor ? new GeneseMapper<U>(uConstructor) : undefined;\n        this.geneseEnvironmentService = geneseEnvironmentService;\n    }\n\n\n    /**\n     * Deletes an element and returns success or failed status.\n     * This method needs to respect Genese standard model\n     */\n    delete(path: string, options: RequestOptions = {}): Observable<T | ResponseStatus> {\n        Tools.checkPath(path);\n        const url = Tools.apiRoot(this.geneseEnvironmentService.api, path);\n        Object.assign(options, {observe: 'response'});\n        return this.http.delete(url, options as unknown)\n            .pipe(\n                map((response: HttpResponse<any>) => {\n                    if (this.tConstructor) {\n                        return this.geneseMapperServiceT.map(response);\n                    } else {\n                        return response && response.ok === true ? ResponseStatus.SUCCESS : ResponseStatus.FAILED;\n                    }\n                })\n            );\n    }\n\n\n    /**\n     * Calls a GET request in order to get all elements of an array and to map them with T[] type\n     * @param path              the route of the endpoint\n     * @param requestOptions    the options of the request\n     */\n    getAll(path: string, requestOptions?: RequestOptions): Observable<T[]> {\n        if (!path) {\n            console.error('No path : impossible to get elements');\n            return of(undefined);\n        }\n        let httpParams = new HttpParams();\n        if (requestOptions && requestOptions.queryParams) {\n            for (const key of Object.keys(requestOptions.queryParams)) {\n                if (requestOptions.queryParams[key]) {\n                    httpParams = httpParams.set(key, requestOptions.queryParams[key].toString());\n                }\n            }\n            delete requestOptions.queryParams;\n        }\n        const allOptions = Object.assign({}, {params: httpParams}, requestOptions) as any;\n        const url = Tools.apiRoot(this.geneseEnvironmentService.api, path);\n        return this.http.get(url, allOptions).pipe(\n            map((response: any) => {\n                return response ? this.geneseMapperServiceT.arrayMap(response) : [];\n            })\n        );\n    }\n\n\n    /**\n     * Calls GET request and returns an object with T type\n     * Warning : do not use this method in order to return an array. Use getAll() method instead.\n     * @param path              the route of the endpoint\n     * @param requestOptions    the options of the request\n     */\n    get(path: string, requestOptions?: RequestOptions): Observable<T> {\n        Tools.checkPath(path);\n        let httpParams = new HttpParams();\n        if (requestOptions) {\n            if (requestOptions.queryParams) {\n                for (const key of Object.keys(requestOptions.queryParams)) {\n                    if (requestOptions.queryParams[key]) {\n                        httpParams = httpParams.set(key, requestOptions.queryParams[key].toString());\n                    }\n                }\n            }\n        }\n        const options = {params: httpParams};\n        const url = Tools.apiRoot(this.geneseEnvironmentService.api, path);\n        return this.http.get(url, options)\n            .pipe(\n                map((data: any) => {\n                    return this.geneseMapperServiceT.map(data);\n                })\n            );\n    }\n\n\n    /**\n     * Calls PATCH request and returns eventually a response\n     * @param path          the route of the endpoint\n     * @param body          the body of the request\n     * @param options       the options of the request\n     */\n    patch(path: string, body: any, options?: RequestOptions): Observable<T | any> {\n        return this.crud('patch', path, body, options);\n    }\n\n\n\n    /**\n     * Calls POST request and returns eventually a response\n     * @param path          the route of the endpoint\n     * @param body          the body of the request\n     * @param options       the options of the request\n     */\n    post(path: string, body: any, options?: RequestOptions): Observable<T | any> {\n        return this.crud('post', path, body, options);\n    }\n\n\n\n    /**\n     * Calls PUT request and returns eventually a response\n     * @param path          the route of the endpoint\n     * @param body          the body of the request\n     * @param options       the options of the request\n     */\n    put(path: string, body: any, options?: RequestOptions): Observable<T | any> {\n        return this.crud('put', path, body, options);\n    }\n\n\n\n    /**\n     * Experimental method\n     */\n    crud(requestMethod: 'patch' | 'post' | 'put', path: string, body: any, options?: RequestOptions): Observable<T | any> {\n        return this.http[requestMethod](Tools.apiRoot(this.geneseEnvironmentService.api, path), body, this.getRequestOptions(options))\n            .pipe(\n                map((result) => {\n                    if (this.tConstructor) {\n                        return this.geneseMapperServiceT.map(result);\n                    } else {\n                        return result;\n                    }\n                })\n            );\n    }\n\n\n\n\n// --------------------------------------------------\n//                   OTHER METHODS\n// --------------------------------------------------\n\n\n\n\n    /**\n     * Get request options of the http request\n     */\n    private getRequestOptions(options: RequestOptions): any {\n        options = Tools.default(options, {});\n        options.headers = Tools.default(options.headers, {'Content-Type': 'application/json'});\n        return  Object.assign(options, {observe: 'body'});\n    }\n\n\n    /**\n     * Get standard path when Genese model contains genese.path\n     */\n    private getStandardPath(): string {\n        const model = new this.geneseMapperServiceT.tConstructor();\n        if (!model['genese'] || !model['genese'].path) {\n            throw Error('No Genese path environment for the model  : impossible to get element.');\n        } else {\n            return model['genese'].path;\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { GeneseEnvironmentService } from './genese-environment.service';\nimport { TConstructor } from '../models/t-constructor.model';\nimport { Genese } from '../factories/genese-deprecated.factory';\nimport { GeneseAngular } from '../factories/genese-angular.factory';\n\n@Injectable()\nexport class GeneseService {\n\n\n    constructor(private http: HttpClient,\n                private geneseEnvironment: GeneseEnvironmentService) {}\n\n\n    /**\n     * Return a new typed Genese instance\n     */\n    getGeneseInstance<T>(tConstructor: TConstructor<T>): Genese<T> {\n        if (tConstructor) {\n            return new Genese(this.http, this.geneseEnvironment, tConstructor);\n        }\n\n        return undefined;\n    }\n\n\n    /**\n     * Experimental method for genese-api-angular\n     */\n    instance(): GeneseAngular<undefined, undefined>;\n    instance<T>(tConstructor?: TConstructor<T>): GeneseAngular<T, undefined>;\n    instance<T, U>(tConstructor?: TConstructor<T>, uConstructor?: TConstructor<U>): GeneseAngular<T, U>;\n    instance<T, U>(tConstructor?: TConstructor<T>, uConstructor?: TConstructor<U>): GeneseAngular<T, U> {\n        if (!tConstructor && !uConstructor) {\n            return new GeneseAngular<undefined, undefined>(this.http, this.geneseEnvironment);\n        } else if (!uConstructor) {\n            return new GeneseAngular<T, undefined>(this.http, this.geneseEnvironment, tConstructor);\n        } else {\n            return new GeneseAngular<T, U>(this.http, this.geneseEnvironment, tConstructor, uConstructor);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneseAngularService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'lib-genese-angular',\n    template: `\n        <p>\n            genese-angular works!\n        </p>\n    `,\n    styles: []\n})\nexport class GeneseComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Tools } from './services/tools.service';\nimport { GeneseEnvironmentService } from './services/genese-environment.service';\nimport { GeneseService } from './services/genese.service';\nimport { HttpClient } from '@angular/common/http';\nimport { GeneseComponent } from './genese.component';\n\nexport function useFactory(http: HttpClient, geneseEnvironment: GeneseEnvironmentService) {\n    return new GeneseService(http, geneseEnvironment);\n}\n\n@NgModule({\n    declarations: [GeneseComponent],\n    imports: [\n    ],\n    providers: [\n        GeneseEnvironmentService,\n        Tools,\n    ],\n    exports: [GeneseComponent]\n})\nexport class GeneseModule {\n    static forRoot(): ModuleWithProviders<GeneseModule> {\n        return {\n            ngModule: GeneseModule,\n            providers: [\n                GeneseEnvironmentService,\n                Tools,\n                {\n                    provide: GeneseService,\n                    deps: [HttpClient, GeneseEnvironmentService],\n                    useFactory\n                }\n            ]\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ExtractService {\n\n    // --------------------------------------------------\n    //                     CONSTRUCTOR\n    // --------------------------------------------------\n\n\n    constructor() { }\n\n\n\n    // --------------------------------------------------\n    //                     METHODS\n    // --------------------------------------------------\n\n    /**\n     * Extract all the fields of some data corresponding to a given extraction model\n     * @param data\n     * @param extractionModel\n     */\n    static extractFieldsFromData(data: any, extractionModel: any): any {\n        if (!extractionModel) {\n            return data;\n        }\n        const result = {};\n        for (const key of Object.keys(extractionModel)) {\n            Object.assign(result, {[key]: this.extractFieldsForOneProperty(data, key, extractionModel[key])});\n        }\n        return result;\n    }\n\n\n    /**\n     * For a given key of an extraction model and with the path corresponding of this key,\n     * returns the fields from data which have the same key for the same path\n     * @param data\n     * @param key\n     * @param pathExtraction\n     */\n    static extractFieldsForOneProperty(data: any, key: string, pathExtraction: string): object {\n        const extracts = [];\n        if (Array.isArray(data)) {\n            for (const element of data) {\n                extracts.push(this.extractFieldsForOneProperty(element, key, pathExtraction));\n            }\n        } else {\n            return ExtractService.extractValue(data, key, pathExtraction);\n        }\n        return extracts;\n    }\n\n\n    /**\n     * With a given key and a given path, extracts the value of a data object for this key and this path\n     * @param data\n     * @param key\n     * @param path\n     */\n    static extractValue(data: any, key: string, path: string): any {\n        if (!data || !path || typeof path !== 'string') {\n            return data;\n        }\n        const branches: string[] = path.split('.');\n        let value;\n        for (const branch of branches) {\n            if (!value) {\n                value = data[branch];\n            } else {\n                value = value[branch];\n            }\n        }\n        return value;\n    }\n}\n","export class GeneseConfig {\n    api: string;\n    extract?: string;\n    pagination?: {\n        pageIndex: string,\n        pageSize: string,\n        results: string,\n        totalResults: string\n    } = {\n        pageIndex: 'gnPageIndex',\n        pageSize: 'gnPageSize',\n        results: 'gnResults',\n        totalResults: 'gnTotalResults'\n    };\n}\n","export class GeneseModelEnvironment {\n    path ?= '';\n}\n","\nexport const PRIMITIVES: string[] = ['String', 'Number', 'Boolean'];\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport class RequestOptions {\n    body?: any;\n    cookieParams?: any;\n    headers?: HttpHeaders | {\n        [header: string]: string | string[];\n    };\n    id?: string;\n    mapData ?= true;\n    observe?: HttpObserve ;\n    params?: HttpParams | {\n        [param: string]: string | string[];\n    };\n    queryParams?: {\n        [param: string]: string\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n}\n\nexport type HttpObserve = 'body' | 'events' | 'response';\n","/*\n * Public API Surface of angular\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Tools } from './lib/services/tools.service';\nimport { GeneseService } from './lib/services/genese.service';\nimport { HttpClient } from '@angular/common/http';\nimport { GeneseEnvironmentService } from './lib/services/genese-environment.service';\n\n// Root elements\nexport * from './lib/genese-angular.service';\nexport * from './lib/genese.component';\nexport * from './lib/genese.module';\n\n// Services\nexport * from './lib/services/genese.service';\nexport * from './lib/services/tools.service';\nexport * from './lib/services/extract.service';\nexport * from './lib/services/genese-environment.service';\n\n// Factories\nexport * from './lib/factories/genese-deprecated.factory';\nexport * from './lib/factories/genese-angular.factory';\n\n// Models\nexport * from './lib/models/array-response.model';\nexport * from './lib/models/genese-config.model';\nexport * from './lib/models/genese-model-environment.model';\nexport * from './lib/models/get-all-params.model';\nexport * from './lib/models/get-one-params.model';\nexport * from './lib/models/primitive.model';\nexport * from './lib/models/request-options.model';\nexport * from './lib/models/t-constructor.model';\n\n// Enums\nexport * from './lib/enums/request-method';\nexport * from './lib/enums/response-status';\n\n@NgModule()\nexport class GnModule {\n    static forRoot(): ModuleWithProviders<GnModule> {\n        return {\n            ngModule: GnModule,\n            providers: [\n                GeneseEnvironmentService,\n                Tools,\n                {\n                    provide: GeneseService,\n                    deps: [HttpClient, GeneseEnvironmentService],\n                    useFactory(http: HttpClient, geneseEnvironment: GeneseEnvironmentService) {\n                        const service = new GeneseService(http, geneseEnvironment);\n                        return service;\n                    }\n                }]\n        };\n    }\n\n    static forChild(): ModuleWithProviders<GnModule> {\n        return {\n            ngModule: GnModule,\n            providers: [\n                GeneseEnvironmentService,\n                Tools,\n                {\n                    provide: GeneseService,\n                    deps: [HttpClient, GeneseEnvironmentService],\n                    useFactory(http: HttpClient, geneseEnvironment: GeneseEnvironmentService) {\n                        const service = new GeneseService(http, geneseEnvironment);\n                        return service;\n                    }\n                }]\n        };\n    }\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}