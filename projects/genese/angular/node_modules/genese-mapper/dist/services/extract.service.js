var ExtractService = /** @class */ (function () {
    // --------------------------------------------------
    //                     CONSTRUCTOR
    // --------------------------------------------------
    function ExtractService() {
    }
    // --------------------------------------------------
    //                     METHODS
    // --------------------------------------------------
    /**
     * Extract all the fields of some data corresponding to a given extraction model
     * @param data
     * @param extractionModel
     */
    ExtractService.extractFieldsFromData = function (data, extractionModel) {
        var _a;
        if (!extractionModel) {
            return data;
        }
        var result = {};
        for (var _i = 0, _b = Object.keys(extractionModel); _i < _b.length; _i++) {
            var key = _b[_i];
            Object.assign(result, (_a = {}, _a[key] = this.extractFieldsForOneProperty(data, key, extractionModel[key]), _a));
        }
        return result;
    };
    /**
     * For a given key of an extraction model and with the path corresponding of this key,
     * returns the fields from data which have the same key for the same path
     * @param data
     * @param key
     * @param pathExtraction
     */
    ExtractService.extractFieldsForOneProperty = function (data, key, pathExtraction) {
        var extracts = [];
        if (Array.isArray(data)) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var element = data_1[_i];
                extracts.push(this.extractFieldsForOneProperty(element, key, pathExtraction));
            }
        }
        else {
            return ExtractService.extractValue(data, key, pathExtraction);
        }
        return extracts;
    };
    /**
     * With a given key and a given path, extracts the value of a data object for this key and this path
     * @param data
     * @param key
     * @param path
     */
    ExtractService.extractValue = function (data, key, path) {
        if (!data || !path || typeof path !== 'string') {
            return data;
        }
        var branches = path.split('.');
        var value;
        for (var _i = 0, branches_1 = branches; _i < branches_1.length; _i++) {
            var branch = branches_1[_i];
            if (!value) {
                value = data[branch];
            }
            else {
                value = value[branch];
            }
        }
        return value;
    };
    return ExtractService;
}());
export { ExtractService };
