/**
 * clone object with deep copy
 */
export function clone(model) {
    var _this = this;
    if (model) {
        if (Array.isArray(model)) {
            var newArray_1 = [];
            model.forEach(function (item) { return newArray_1.push(_this.clone(item)); });
            return newArray_1;
        }
        else if (typeof model === 'object') {
            var newObject_1 = {};
            Object.keys(model).forEach(function (key) { return newObject_1[key] = _this.clone(model[key]); });
            return newObject_1;
        }
        else {
            return model;
        }
    }
    else {
        return model;
    }
}
/**
 * Check if an object is a primitive or not
 */
export function isPrimitive(target) {
    return typeof target === 'string'
        || typeof target === 'number'
        || typeof target === 'boolean';
}
/**
 * Check if two objects have the same values for every key
 */
export function isSameObject(obj1, obj2) {
    if (obj1 === obj2) {
        return true;
    }
    if (typeof obj1 === 'number' && obj1.toString() === obj2.toString()) {
        return true;
    }
    if ((obj1 === undefined || obj2 === undefined)
        || (Array.isArray(obj1) && !Array.isArray(obj2))
        || (!Array.isArray(obj1) && Array.isArray(obj2))
        || (Array.isArray(obj1) && Array.isArray(obj2) && obj1.length !== obj2.length)
        || obj1 === !obj2) {
        return false;
    }
    if (Array.isArray(obj1) && Array.isArray(obj2)) {
        var index = 0;
        for (var _i = 0, obj1_1 = obj1; _i < obj1_1.length; _i++) {
            var element = obj1_1[_i];
            if (!this.isSameObject(element, obj2[index])) {
                return false;
            }
            index++;
        }
        return true;
    }
    else {
        for (var _a = 0, _b = Object.keys(obj1); _a < _b.length; _a++) {
            var key = _b[_a];
            if (!obj2.hasOwnProperty(key) || (!obj2[key] && !!obj1[key]) || (!!obj2[key] && !obj1[key])) {
                return false;
            }
            if (Array.isArray(obj1[key])) {
                if (!this.isSameObject(obj1[key], obj2[key])) {
                    return false;
                }
            }
            else {
                if (typeof obj1[key] === 'object') {
                    if (!this.isSameObject(obj1[key], obj2[key])) {
                        return false;
                    }
                }
                else {
                    if (obj1[key] && obj2[key] && obj1[key].toString() !== obj2[key].toString()) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}
