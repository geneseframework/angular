import { GeneseMapper } from '../mapper/genese.mapper';
import { isSameObject } from '../services/tools.service';
describe('GENESE MAPPER _mapArray', function () {
    // **************************************************************************
    // objects
    // **************************************************************************
    describe('map array of objects', function () {
        var gmp = new GeneseMapper(Object);
        it('[{a: 1}], undefined => [{a: 1}]', function () {
            expect(isSameObject(gmp._mapArray([{ a: 1 }], undefined), [{ a: 1 }])).toBeTruthy();
        });
        it('[{a: 1}], null => []', function () {
            expect(isSameObject(gmp._mapArray([{ a: 1 }], null), null)).toBeTruthy();
        });
        it('undefined, [{a: 1}] => undefined', function () {
            expect(gmp._mapArray(undefined, [{ a: 1 }]) === undefined).toBeTruthy();
        });
        it('[], [{a: 1}] => undefined', function () {
            expect(gmp._mapArray([], [{ a: 1 }]) === undefined).toBeTruthy();
        });
        it('[{a: 1}], [{a: 1}] => [{a: 1}]', function () {
            expect(isSameObject(gmp._mapArray([{ a: 1 }], [{ a: 1 }]), [{ a: 1 }])).toBeTruthy();
        });
        it('[{a: 1}], [{a: 1}] => [{a: 1}]', function () {
            expect(isSameObject(gmp._mapArray([{ a: 1 }], [{ a: 1 }]), [{ a: 1 }])).toBeTruthy();
        });
        it('[[{a: 1}, {b: 2}], [{c: 3}]], [{a: 1}] => [[{a: 1}, {b: 2}], [{c: 3}]], [{a: 1}]', function () {
            expect(isSameObject(gmp._mapArray([[{ a: 0 }]], [[{ a: 1 }, { b: 2 }], [{ c: 3 }]]), [[{ a: 1 }, { a: 0 }], [{ a: 0 }]])).toBeTruthy();
        });
        it('[[{a: 0}]], [{a: 1}, {a: 2}] => [[{a: 0}]]', function () {
            expect(isSameObject(gmp._mapArray([[{ a: 0 }]], [{ a: 1 }, { a: 2 }]), [[{ a: 0 }]])).toBeTruthy();
        });
        it('[[{a: 0}]], [[{a: 1}, {a: 2}], []] => [[{a: 1}, {a: 2}], []]', function () {
            expect(isSameObject(gmp._mapArray([[{ a: 0 }]], [[{ a: 1 }, { a: 2 }], []]), [[{ a: 1 }, { a: 2 }], []])).toBeTruthy();
        });
        it('[[{a: 0}]], [[{a: 1}, {a: 2}], null]] => [[{a: 1}, {a: 2}], null]]', function () {
            expect(isSameObject(gmp._mapArray([[{ a: 0 }]], [[{ a: 1 }, { a: 2 }], null]), [[{ a: 1 }, { a: 2 }], null])).toBeTruthy();
        });
        it('[[{a: 0}]], [[{a: 1}, {a: 2}], undefined] => [[{a: 1}, {a: 2}], [{a: 0}]]', function () {
            expect(isSameObject(gmp._mapArray([[{ a: 0 }]], [[{ a: 1 }, { a: 2 }], undefined]), [[{ a: 1 }, { a: 2 }], [{ a: 0 }]])).toBeTruthy();
        });
        it('[[[{a: 0}]]], [[{a: 1}]] => [[[{a: 0}]]]', function () {
            expect(isSameObject(gmp._mapArray([[[{ a: 0 }]]], [[{ a: 1 }]]), [[[{ a: 0 }]]])).toBeTruthy();
        });
        it('[[[{a: 0}]]], [[{a: 1}, {a: 2}]] => [[[{a: 0}]]]', function () {
            expect(isSameObject(gmp._mapArray([[[{ a: 0 }]]], [[{ a: 1 }, { a: 2 }]]), [[[{ a: 0 }]]])).toBeTruthy();
        });
    });
    // **************************************************************************
    // primitives
    // **************************************************************************
    describe('map array of primitives', function () {
        describe('map array of strings', function () {
            var gmp = new GeneseMapper(String);
            it('[""], ["a"] => ["a"]', function () {
                expect(isSameObject(gmp._mapArray([''], ['a']), ['a'])).toBeTruthy();
            });
            it('[""], [""] => [""]', function () {
                expect(isSameObject(gmp._mapArray([''], ['']), [''])).toBeTruthy();
            });
            it('[""], [] => []', function () {
                expect(isSameObject(gmp._mapArray([''], []), [])).toBeTruthy();
            });
            it('[[""]], [["a"]] => [["a"]]', function () {
                expect(isSameObject(gmp._mapArray([['']], [['a']]), [['a']])).toBeTruthy();
            });
            it('[[""]], [["a", "b"]] => [["a", "b"]]', function () {
                expect(isSameObject(gmp._mapArray([['']], [['a', 'b']]), [['a', 'b']])).toBeTruthy();
            });
            it('[[""]], [["a", "b"], []] => [["a", "b"], []]', function () {
                expect(isSameObject(gmp._mapArray([['']], [['a', 'b'], []]), [['a', 'b'], []])).toBeTruthy();
            });
            it('[[""]], [["a", "b"], ["c"]] => [["a", "b"], ["c"]]', function () {
                expect(isSameObject(gmp._mapArray([['']], [['a', 'b'], ['c']]), [['a', 'b'], ['c']])).toBeTruthy();
            });
            it('[[""]], [["a", "b"], null] => [["a", "b"], null]', function () {
                expect(isSameObject(gmp._mapArray([['']], [['a', 'b'], null]), [['a', 'b'], null])).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('map array of numbers', function () {
            var gmp = new GeneseMapper(Number);
            it('[0], [3] => [3]', function () {
                expect(isSameObject(gmp._mapArray([0], [3]), [3])).toBeTruthy();
            });
            it('[[0]], [[2, 3], [4]] => [[2, 3], [4]]', function () {
                expect(isSameObject(gmp._mapArray([[0]], [[2, 3], [4]]), [[2, 3], [4]])).toBeTruthy();
            });
        });
    });
});
