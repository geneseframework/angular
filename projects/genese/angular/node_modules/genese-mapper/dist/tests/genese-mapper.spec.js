import { GeneseMapper } from '..';
import { isSameObject } from '../services/tools.service';
describe('GENESE MAPPER geneseMapper', function () {
    // **************************************************************************
    // primitives
    // **************************************************************************
    describe('PRIMITIVES', function () {
        describe('numbers', function () {
            var TestNumber = /** @class */ (function () {
                function TestNumber() {
                    this.a = 5;
                }
                return TestNumber;
            }());
            var geneseMapper = new GeneseMapper(TestNumber);
            it('{a: 1} => {a: 1}', function () {
                expect(isSameObject(geneseMapper.map({ a: 1 }), { a: 1 })).toBeTruthy();
            });
            it('{a: "1"} => {a: 1}', function () {
                expect(isSameObject(geneseMapper.map({ a: '1' }), { a: 1 })).toBeTruthy();
            });
            it('{a: "z"} => {a: 5}', function () {
                expect(isSameObject(geneseMapper.map({ a: 'z' }), { a: 5 })).toBeTruthy();
            });
            it('{a: true} => {a: 5}', function () {
                expect(isSameObject(geneseMapper.map({ a: true }), { a: 5 })).toBeTruthy();
            });
            it('1 => {a: 0}', function () {
                expect(isSameObject(geneseMapper.map(1), { a: 5 })).toBeTruthy();
            });
            it('undefined => {a: 5}', function () {
                expect(isSameObject(geneseMapper.map(undefined), { a: 5 })).toBeTruthy();
            });
            it('null => {a: 5}', function () {
                expect(isSameObject(geneseMapper.map(null), { a: 5 })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
        });
        // **************************************************************************
        var TestString = /** @class */ (function () {
            function TestString() {
                this.a = '';
            }
            return TestString;
        }());
        describe('strings', function () {
            var geneseMapper = new GeneseMapper(TestString);
            it('{a: "1"} => {a: "1"}', function () {
                expect(isSameObject(geneseMapper.map({ a: '1' }), { a: '1' })).toBeTruthy();
            });
            it('{a: "1"} => {a: 1}', function () {
                expect(isSameObject(geneseMapper.map({ a: 1 }), { a: '1' })).toBeTruthy();
            });
            it('true => {a: 0}', function () {
                expect(isSameObject(geneseMapper.map(true), { a: '' })).toBeTruthy();
            });
            it('1 => {a: ""}', function () {
                expect(isSameObject(geneseMapper.map(1), { a: '' })).toBeTruthy();
            });
            it('undefined => {a: ""}', function () {
                expect(isSameObject(geneseMapper.map(undefined), { a: '' })).toBeTruthy();
            });
            it('null => {a: ""}', function () {
                expect(isSameObject(geneseMapper.map(null), { a: '' })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
        });
        // **************************************************************************
        var TestBoolean = /** @class */ (function () {
            function TestBoolean() {
                this.a = true;
            }
            return TestBoolean;
        }());
        describe('booleans', function () {
            var geneseMapper = new GeneseMapper(TestBoolean);
            it('{a: "1"} => {a: true}', function () {
                expect(isSameObject(geneseMapper.map({ a: '1' }), { a: true })).toBeTruthy();
            });
            it('{a: "1"} => {a: true}', function () {
                expect(isSameObject(geneseMapper.map({ a: 1 }), { a: true })).toBeTruthy();
            });
            it('true => {a: true}', function () {
                expect(isSameObject(geneseMapper.map(true), { a: true })).toBeTruthy();
            });
            it('1 => {a: true}', function () {
                expect(isSameObject(geneseMapper.map(1), { a: true })).toBeTruthy();
            });
            it('undefined => {a: true"}', function () {
                expect(isSameObject(geneseMapper.map(undefined), { a: true })).toBeTruthy();
            });
            it('null => {a: true}', function () {
                expect(isSameObject(geneseMapper.map(null), { a: true })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
        });
    });
    // **************************************************************************
    // undefined
    // **************************************************************************
    describe('UNDEFINED', function () {
        var TestUndefined = /** @class */ (function () {
            function TestUndefined() {
                this.a = undefined;
            }
            return TestUndefined;
        }());
        var geneseMapper = new GeneseMapper(TestUndefined);
        it('{a: 1} => {a: 1}', function () {
            expect(isSameObject(geneseMapper.map({ a: 1 }), { a: 1 })).toBeTruthy();
        });
        it('{a: {b: 2}} => {a: {b: 2}}', function () {
            expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: { b: 2 } })).toBeTruthy();
        });
    });
    // **************************************************************************
    // arrays
    // **************************************************************************
    describe('OBJECTS WITH ARRAYS', function () {
        describe('object with array of numbers', function () {
            var TestArrayNumbers = /** @class */ (function () {
                function TestArrayNumbers() {
                    this.a = [5];
                }
                return TestArrayNumbers;
            }());
            var geneseMapper = new GeneseMapper(TestArrayNumbers);
            it('{a: 1} => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map({ a: 1 }), { a: [5] })).toBeTruthy();
            });
            it('{a: [1]} => {a: [1]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [1] }), { a: [1] })).toBeTruthy();
            });
            it('{a: ["1"]} => {a: [1]}', function () {
                expect(isSameObject(geneseMapper.map({ a: ['1'] }), { a: [1] })).toBeTruthy();
            });
            it('{a: ["b"]} => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map({ a: ['b'] }), { a: [5] })).toBeTruthy();
            });
            it('{a: {b: 2}} => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: [5] })).toBeTruthy();
            });
            it('{a: [{b: 2}]} => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: 2 }] }), { a: [5] })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
            it('{a: undefined} => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map({ a: undefined }), { a: [5] })).toBeTruthy();
            });
            it('{a: [null]} => {a: [null]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [null] }), { a: [null] })).toBeTruthy();
            });
            it('{a: [undefined]} => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [undefined] }), { a: [5] })).toBeTruthy();
            });
            it('["z"] => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map(['z']), { a: [5] })).toBeTruthy();
            });
            it('null => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map(null), { a: [5] })).toBeTruthy();
            });
            it('[null] => {a: [5]}', function () {
                expect(isSameObject(geneseMapper.map([null]), { a: [5] })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('object with array of strings', function () {
            var TestArrayStrings = /** @class */ (function () {
                function TestArrayStrings() {
                    this.a = [''];
                }
                return TestArrayStrings;
            }());
            var geneseMapper = new GeneseMapper(TestArrayStrings);
            it('{a: 1} => {a: [""]}', function () {
                expect(isSameObject(geneseMapper.map({ a: 1 }), { a: [''] })).toBeTruthy();
            });
            it('{a: [1]} => {a: ["1"]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [1] }), { a: ['1'] })).toBeTruthy();
            });
            it('{a: ["1"]} => {a: ["1"]}', function () {
                expect(isSameObject(geneseMapper.map({ a: ['1'] }), { a: ['1'] })).toBeTruthy();
            });
            it('{a: [true]} => {a: ["1"]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [true] }), { a: ['1'] })).toBeTruthy();
            });
            it('{a: {b: 2}} => {a: [""]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: [''] })).toBeTruthy();
            });
            it('{a: [{b: 2}]} => {a: [""]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: 2 }] }), { a: [''] })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
            it('{a: undefined} => {a: [""]}', function () {
                expect(isSameObject(geneseMapper.map({ a: undefined }), { a: [''] })).toBeTruthy();
            });
            it('{a: [null]} => {a: [null]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [null] }), { a: [null] })).toBeTruthy();
            });
            it('{a: [undefined]} => {a: [""]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [undefined] }), { a: [''] })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('object with array of booleans', function () {
            var TestArrayBooleans = /** @class */ (function () {
                function TestArrayBooleans() {
                    this.a = [false];
                }
                return TestArrayBooleans;
            }());
            var geneseMapper = new GeneseMapper(TestArrayBooleans);
            it('{a: 1} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: 1 }), { a: [false] })).toBeTruthy();
            });
            it('{a: [1]} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [1] }), { a: [false] })).toBeTruthy();
            });
            it('{a: ["1"]} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: ['1'] }), { a: [false] })).toBeTruthy();
            });
            it('{a: [true]} => {a: [true]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [true] }), { a: [true] })).toBeTruthy();
            });
            it('{a: {b: 2}} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: [false] })).toBeTruthy();
            });
            it('{a: [{b: 2}]} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: 2 }] }), { a: [false] })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
            it('{a: undefined} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: undefined }), { a: [false] })).toBeTruthy();
            });
            it('{a: [null]} => {a: [null]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [null] }), { a: [null] })).toBeTruthy();
            });
            it('{a: [undefined]} => {a: [false]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [undefined] }), { a: [false] })).toBeTruthy();
            });
        });
    });
    // **************************************************************************
    // objects
    // **************************************************************************
    describe('OBJECTS WITH NESTED OBJECTS', function () {
        describe('simple nested object', function () {
            var TestObject = /** @class */ (function () {
                function TestObject() {
                    this.a = { b: '' };
                }
                return TestObject;
            }());
            var geneseMapper = new GeneseMapper(TestObject);
            it('{a: {b: 2}} => {a: {b: 2}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: { b: 2 } })).toBeTruthy();
            });
            it('{a: 3} => {a: {b: ""}}', function () {
                expect(isSameObject(geneseMapper.map({ a: 3 }), { a: { b: '' } })).toBeTruthy();
            });
            it('{a: {c: 3}} => {a: {b: ""}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { c: 3 } }), { a: { b: '' } })).toBeTruthy();
            });
            it('{a: {b: null}} => {a: {b: null}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: null } }), { a: { b: null } })).toBeTruthy();
            });
            it('{a: {b: undefined}} => {a: {b: ""}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: undefined } }), { a: { b: '' } })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('object with undefined', function () {
            // A nested property must be initialized: if not, the model above is equivalent to
            // {
            //      a?: undefined
            // }
            var TestObjectWithUndefined = /** @class */ (function () {
                function TestObjectWithUndefined() {
                    this.a = { b: undefined };
                }
                return TestObjectWithUndefined;
            }());
            var geneseMapper = new GeneseMapper(TestObjectWithUndefined);
            it('{a: {b: 2}} => {a: {b: 2}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: { b: 2 } })).toBeTruthy();
            });
            it('{a: 3} => {a: {b: undefined}}', function () {
                expect(isSameObject(geneseMapper.map({ a: 3 }), { a: 3 })).toBeTruthy();
            });
            it('{a: {c: 3}} => {a: {b: undefined}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { c: 3 } }), { a: { c: 3 } })).toBeTruthy();
            });
            it('{a: {b: null}} => {a: {b: null}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: null } }), { a: { b: null } })).toBeTruthy();
            });
            it('{a: {b: undefined}} => {a: {b: undefined}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: undefined } }), { a: { b: undefined } })).toBeTruthy();
            });
            it('{a: {b: {c: 3}}} => {a: {b: {c: 3}}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: { c: 3 } } }), { a: { b: { c: 3 } } })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('nested object with array', function () {
            var TestObjectWithArray = /** @class */ (function () {
                function TestObjectWithArray() {
                    this.a = { b: [''] };
                }
                return TestObjectWithArray;
            }());
            var geneseMapper = new GeneseMapper(TestObjectWithArray);
            it('{a: {b: 2}} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: { b: [''] } })).toBeTruthy();
            });
            it('{a: 3} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: 3 }), { a: { b: [''] } })).toBeTruthy();
            });
            it('{a: {b: ["5"]}} => {a: {b: ["5"]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: ['5'] } }), { a: { b: ['5'] } })).toBeTruthy();
            });
            it('{a: {b: [5]}} => {a: {b: [5]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: [5] } }), { a: { b: ['5'] } })).toBeTruthy();
            });
            it('{a: {b: [false]}} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: [false] } }), { a: { b: [''] } })).toBeTruthy();
            });
            it('{a: {c: 3}} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { c: 3 } }), { a: { b: [''] } })).toBeTruthy();
            });
            it('{a: {b: null}} => {a: {b: null}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: null } }), { a: { b: null } })).toBeTruthy();
            });
            it('{a: {b: undefined}} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: undefined } }), { a: { b: [''] } })).toBeTruthy();
            });
            it('{a: {b: {c: 3}}} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: { c: 3 } } }), { a: { b: [''] } })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('nested array of objects', function () {
            var TestArrayOfObjects = /** @class */ (function () {
                function TestArrayOfObjects() {
                    this.a = [{ b: '' }];
                }
                return TestArrayOfObjects;
            }());
            var geneseMapper = new GeneseMapper(TestArrayOfObjects);
            it('{a: {b: 2}} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: 3} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: 3 }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: {b: ["5"]}} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: ['5'] } }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: {b: [5]}} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: [5] } }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: {b: [false]}} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: [false] } }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: {c: 3}} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { c: 3 } }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: {b: null}} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: null } }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: null} => {a: null}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
            it('{a: [null]}} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [null] }), { a: [null] })).toBeTruthy();
            });
            it('{a: [{b: 4}]} => {a: [{b: 4}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: 4 }] }), { a: [{ b: 4 }] })).toBeTruthy();
            });
            it('{a: [{b: null}]} => {a: [{b: null}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: null }] }), { a: [{ b: null }] })).toBeTruthy();
            });
            it('{a: [{b: undefined}]} => {a: [{b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: undefined }] }), { a: [{ b: '' }] })).toBeTruthy();
            });
            it('{a: [{b: true}]} => {a: {b: [""]}}', function () {
                expect(isSameObject(geneseMapper.map({ a: [{ b: true }] }), { a: [{ b: '' }] })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('objects with objects as indexable types', function () {
            var TestClass = /** @class */ (function () {
                function TestClass() {
                    this.a = {
                        gnIndexableType: {
                            b: ''
                        }
                    };
                }
                return TestClass;
            }());
            var geneseMapper = new GeneseMapper(TestClass);
            it('{a: {fr: {b: "2"}}} => {a: {fr: {b: "2"}}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { fr: { b: '2' } } }), { a: { fr: { b: '2' } } })).toBeTruthy();
            });
            it('{a: {fr: {b: "2"}, en: {b: "2"}}} => {a: {fr: {b: "2"}, en: {b: "2"}}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { fr: { b: '2' } }, en: { b: '2' } }), { a: { fr: { b: '2' } }, en: { b: '2' } })).toBeTruthy();
            });
            it('{{a: {c: "2"}}} => {a: {}}', function () {
                expect(isSameObject(geneseMapper.map({ a: { c: '2' } }), { a: { c: { b: '' } } })).toBeTruthy();
            });
        });
        // **************************************************************************
        describe('objects with primitives as indexable types ', function () {
            var TestClass = /** @class */ (function () {
                function TestClass() {
                    this.a = {
                        gnIndexableType: ''
                    };
                }
                return TestClass;
            }());
            var geneseMapper = new GeneseMapper(TestClass);
            it('{a: {b: "2"}} => {a: {b: "2"}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: '2' } }), { a: { b: '2' } })).toBeTruthy();
            });
            it('{a: {b: 2}} => {a: {b: "2"}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: 2 } }), { a: { b: '2' } })).toBeTruthy();
            });
            it('{a: {b: null}} => {a: {b: null}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: null } }), { a: { b: null } })).toBeTruthy();
            });
            it('{a: {b: undefined}} => {a: {b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: '' } }), { a: { b: '' } })).toBeTruthy();
            });
            it('{a: {}} => {a: {b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: '' } }), { a: { b: '' } })).toBeTruthy();
            });
            it('{a: {b: {c: 2}}} => {a: {b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: { b: '' } }), { a: { b: '' } })).toBeTruthy();
            });
            it('{a: null} => {a: null]}', function () {
                expect(isSameObject(geneseMapper.map({ a: null }), { a: null })).toBeTruthy();
            });
            it('{a: undefined} => {a: {b: ""}]}', function () {
                expect(isSameObject(geneseMapper.map({ a: undefined }), { a: {} })).toBeTruthy();
            });
        });
    });
    // **************************************************************************
    // arrays
    // **************************************************************************
    describe('ARRAYS', function () {
        describe('array of numbers', function () {
            var geneseMapper = new GeneseMapper(Number);
            it('[1, 2] => [1, 2]', function () {
                expect(isSameObject(geneseMapper.arrayMap([1, 2]), [1, 2])).toBeTruthy();
            });
            it('[1, "2"] => [1, 2]', function () {
                expect(isSameObject(geneseMapper.arrayMap([1, '2']), [1, 2])).toBeTruthy();
            });
            it('[] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([]), [])).toBeTruthy();
            });
            it('[true, false] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([true, false]), [])).toBeTruthy();
            });
            it('[{a: 2}] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([{ a: 2 }]), [])).toBeTruthy();
            });
            it('[null] => [null]', function () {
                expect(isSameObject(geneseMapper.arrayMap([null]), [null])).toBeTruthy();
            });
            it('null => []', function () {
                expect(isSameObject(geneseMapper.arrayMap(null), null)).toBeTruthy();
            });
            it('undefined => []', function () {
                expect(isSameObject(geneseMapper.arrayMap(undefined), [])).toBeTruthy();
            });
            it('[undefined] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([undefined]), [])).toBeTruthy();
            });
        });
        describe('array of strings', function () {
            var geneseMapper = new GeneseMapper(String);
            it('[1, 2] => [1, 2]', function () {
                expect(isSameObject(geneseMapper.arrayMap([1, 2]), ['1', '2'])).toBeTruthy();
            });
            it('[1, "2"] => [1, 2]', function () {
                expect(isSameObject(geneseMapper.arrayMap([1, '2']), ['1', '2'])).toBeTruthy();
            });
            it('[] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([]), [])).toBeTruthy();
            });
            it('[true, false] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([true, false]), [])).toBeTruthy();
            });
            it('[{a: 2}] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([{ a: 2 }]), [])).toBeTruthy();
            });
            it('[null] => [null]', function () {
                expect(isSameObject(geneseMapper.arrayMap([null]), [null])).toBeTruthy();
            });
            it('null => []', function () {
                expect(isSameObject(geneseMapper.arrayMap(null), null)).toBeTruthy();
            });
            it('undefined => []', function () {
                expect(isSameObject(geneseMapper.arrayMap(undefined), [])).toBeTruthy();
            });
            it('[undefined] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([undefined]), [])).toBeTruthy();
            });
        });
        describe('array of booleans', function () {
            var geneseMapper = new GeneseMapper(Boolean);
            it('[1, 2] => [1, 2]', function () {
                expect(isSameObject(geneseMapper.arrayMap([1, 2]), [])).toBeTruthy();
            });
            it('[1, "2"] => [1, 2]', function () {
                expect(isSameObject(geneseMapper.arrayMap([1, '2']), [])).toBeTruthy();
            });
            it('[0] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([0]), [])).toBeTruthy();
            });
            it('[] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([]), [])).toBeTruthy();
            });
            it('[true, false] => [true, false]', function () {
                expect(isSameObject(geneseMapper.arrayMap([true, false]), [true, false])).toBeTruthy();
            });
            it('[{a: 2}] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([{ a: 2 }]), [])).toBeTruthy();
            });
            it('[null] => [null]', function () {
                expect(isSameObject(geneseMapper.arrayMap([null]), [null])).toBeTruthy();
            });
            it('null => []', function () {
                expect(isSameObject(geneseMapper.arrayMap(null), null)).toBeTruthy();
            });
            it('undefined => []', function () {
                expect(isSameObject(geneseMapper.arrayMap(undefined), [])).toBeTruthy();
            });
            it('[undefined] => []', function () {
                expect(isSameObject(geneseMapper.arrayMap([undefined]), [])).toBeTruthy();
            });
        });
    });
});
